name: Release Build

on:
  workflow_call:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        type: string
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  test:
    name: Run Test Suite
    uses: ./.github/workflows/ci.yml

  version:
    name: Determine Version and Tag
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag_version.outputs.new_tag }}
      changelog: ${{ steps.tag_version.outputs.changelog }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Validate version bump
        run: |
          case "${{ inputs.version_bump }}" in
            patch|minor|major) ;;
            *) echo "Invalid version bump"; exit 1 ;;
          esac

      - name: Determine version bump
        id: version-bump
        run: |
          VERSION_BUMP="${{ inputs.version_bump }}"
          echo "version-bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "Detected version bump: $VERSION_BUMP"

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.70.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          RELEASE_BRANCHES: main
          DEFAULT_BUMP: ${{ steps.version-bump.outputs.version-bump }}

  build:
    name: Build ${{ matrix.display_name }}
    needs: version
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            display_name: Linux
            script: build-linux.sh
          - os: ubuntu-latest
            name: windows
            display_name: Windows
            script: build-windows.sh
          - os: macos-latest
            name: macos
            display_name: macOS
            script: build-macos.sh

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libc6-dev libgl1-mesa-dev xorg-dev

      - name: Build application
        run: |
          chmod +x ./scripts/${{ matrix.script }}
          ./scripts/${{ matrix.script }} ${{ needs.version.outputs.version }} $(git rev-parse --short HEAD) $(date +%F)

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-build
          path: dist/${{ matrix.name }}/*

  create-release:
    name: Create GitHub Release
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.version }}
          release_name: Release ${{ needs.version.outputs.version }}
          body: ${{ needs.version.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for dir in dist/*/; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*; do
                if [ -f "$file" ]; then
                  gh release upload ${{ needs.version.outputs.version }} "$file" --clobber
                fi
              done
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
