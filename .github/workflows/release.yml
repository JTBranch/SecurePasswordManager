name: Release Build

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
  workflow_call: # Allow this workflow to be called by other workflows
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: string

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    if: always() && ((github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call')
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for version detection

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Install Fyne and fyne-cross
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev
          go install fyne.io/fyne/v2/cmd/fyne@latest
          go install github.com/fyne-io/fyne-cross@latest
          go install github.com/fyne-io/fyne-cross@latest

      - name: Determine version bump
        id: version-bump
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ github.event_name }}" = "workflow_call" ]; then
            # Manual trigger - use provided input
            VERSION_BUMP="${{ inputs.version_bump }}"
          else
            # Automatic trigger - detect from commit messages
            LATEST_COMMIT=$(git log -1 --pretty=format:"%s %b")
            echo "Latest commit: $LATEST_COMMIT"
            
            if echo "$LATEST_COMMIT" | grep -q "BREAKING CHANGE\|feat!:"; then
              VERSION_BUMP="major"
            elif echo "$LATEST_COMMIT" | grep -q "^feat:"; then
              VERSION_BUMP="minor"
            elif echo "$LATEST_COMMIT" | grep -q "^fix:"; then
              VERSION_BUMP="patch"
            else
              VERSION_BUMP="patch"  # Default for other commit types
            fi
          fi

          echo "version-bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "Detected version bump: $VERSION_BUMP"

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          RELEASE_BRANCHES: main
          DEFAULT_BUMP: ${{ steps.version-bump.outputs.version-bump }}

      - name: Build binaries via script
        run: |
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VERSION=${{ steps.tag_version.outputs.new_tag }}

          chmod +x ./scripts/build.sh
          ./scripts/build.sh "$VERSION" "$COMMIT" "$DATE"

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          files: |
            dist/password-manager-linux-amd64
            dist/password-manager-macos-arm64
            dist/password-manager-windows-amd64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
