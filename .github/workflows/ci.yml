name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - ".github/workflows/**"
  pull_request:
    branches: [main]
  workflow_call: # Allow this workflow to be called by other workflows
  workflow_dispatch: # Allow this workflow to be triggered manually

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install system dependencies (for Fyne/CGO)
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libc6-dev libgl1-mesa-dev xorg-dev

      - name: Set environment variables for tests
        run: |
          echo "GO_PASSWORD_MANAGER_ENV=test" >> $GITHUB_ENV
          echo "APP_VERSION=1.0.0" >> $GITHUB_ENV
          echo "APP_NAME=GoPasswordManager-Test" >> $GITHUB_ENV
          echo "DEFAULT_WINDOW_WIDTH=800" >> $GITHUB_ENV
          echo "DEFAULT_WINDOW_HEIGHT=600" >> $GITHUB_ENV
          echo "DEBUG_LOGGING=false" >> $GITHUB_ENV
          echo "TEST_DATA_DIR=/tmp/go-password-manager-test" >> $GITHUB_ENV
          echo "E2E_TEST_TIMEOUT=30s" >> $GITHUB_ENV
          echo "ENCRYPTION_KEY_SIZE=32" >> $GITHUB_ENV

      - name: Format check
        run: |
          make fmt
          if [ -n "$(git status --porcelain)" ]; then
            echo "Code is not formatted. Run 'make fmt'"
            exit 1
          fi

      - name: Run linter
        continue-on-error: true
        run: make lint

      - name: Run unit tests
        run: |
          echo "ðŸ”¬ Running unit tests..."
          make test-unit

      - name: Run integration tests
        run: |
          echo "ðŸ”— Running integration tests..."
          make test-integration

      - name: Run E2E tests
        run: |
          echo "ðŸŽ­ Running E2E tests..."
          make test-e2e

      - name: Generate comprehensive test reports
        if: always()
        run: |
          echo "ðŸ“Š Generating comprehensive reports..."
          make test-reports

      - name: Upload test reports and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-and-coverage
          path: tmp/output/
          retention-days: 30

      - name: Upload coverage to codecov (optional)
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./tmp/output/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Build application
        run: |
          echo "ðŸ”¨ Building application..."
          make build

      - name: Display coverage summary
        if: always()
        run: |
          echo "ðŸ“ˆ Coverage Summary:"
          if [ -f tmp/output/coverage-summary.txt ]; then
            cat tmp/output/coverage-summary.txt
          else
            echo "Coverage summary not available"
          fi
